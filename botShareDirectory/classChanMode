 

 #include <vector>
#include <string>
#include "Client.hpp"

class ChannelMode {
private:
    bool inviteOnly; // Remplace `i`
    std::vector<std::string> invitedHostNames;
    bool topicProtected; // Remplace `t`
    std::string topic;
    bool passwordProtected; // Remplace `k`
    std::string password;
    std::vector<Client*> operators;
    bool sizeLimited; // Remplace `l`
    size_t limitedSize;
    std::vector<Client*> bannedClients;

public:
    // Constructeur par défaut
    ChannelMode()
        : inviteOnly(false),
          topicProtected(false),
          passwordProtected(false),
          sizeLimited(false),
          limitedSize(0) {}

    // Getters
    bool isInviteOnly() const { return inviteOnly; }
    const std::vector<std::string>& getInvitedHostNames() const { return invitedHostNames; }
    bool isTopicProtected() const { return topicProtected; }
    const std::string& getTopic() const { return topic; }
    bool isPasswordProtected() const { return passwordProtected; }
    const std::string& getPassword() const { return password; }
    const std::vector<Client*>& getOperators() const { return operators; }
    bool isSizeLimited() const { return sizeLimited; }
    size_t getLimitedSize() const { return limitedSize; }
    const std::vector<Client*>& getBannedClients() const { return bannedClients; }

    // Setters
    void setInviteOnly(bool value) { inviteOnly = value; }
    void addInvitedHostName(const std::string& hostName) { invitedHostNames.push_back(hostName); }
    void setTopicProtected(bool value) { topicProtected = value; }
    void setTopic(const std::string& newTopic) { topic = newTopic; }
    void setPasswordProtected(bool value) { passwordProtected = value; }
    void setPassword(const std::string& newPassword) { password = newPassword; }
    void addOperator(Client* client) { operators.push_back(client); }
    void removeOperator(Client* client);
    void setSizeLimited(bool value) { sizeLimited = value; }
    void setLimitedSize(size_t size) { limitedSize = size; }
    void addBannedClient(Client* client) { bannedClients.push_back(client); }
    void removeBannedClient(Client* client);

    // Méthodes supplémentaires pour validation
    bool isClientOperator(Client* client) const {
        return std::find(operators.begin(), operators.end(), client) != operators.end();
    }
    bool isClientBanned(Client* client) const {
        return std::find(bannedClients.begin(), bannedClients.end(), client) != bannedClients.end();
    }
};

void ChannelMode::removeOperator(Client* client) {
    std::vector<Client*>::iterator it = std::remove(operators.begin(), operators.end(), client);
    if (it != operators.end()) {
        operators.erase(it, operators.end());
    }
}

