Pour obtenir le <host> d'un client qui se connecte à un serveur IRC, tu peux utiliser l'API de sockets pour récupérer les informations sur l'hôte distant. Voici les étapes à suivre en C++ :
1. Récupérer l'adresse IP du client

Lorsque le client se connecte, le serveur accepte la connexion via accept(). Cette fonction retourne une nouvelle socket et remplit une structure sockaddr contenant des informations sur l'adresse IP et le port du client.

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <cstring>
#include <iostream>
#include <unistd.h>

// Exemple simple d'acceptation d'une connexion
int server_socket = socket(AF_INET, SOCK_STREAM, 0);
struct sockaddr_in client_addr;
socklen_t client_len = sizeof(client_addr);
int client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_len);

if (client_socket < 0) {
    std::cerr << "Erreur lors de l'acceptation de la connexion\n";
} else {
    char client_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &client_addr.sin_addr, client_ip, INET_ADDRSTRLEN);
    std::cout << "Client connecté avec l'adresse IP : " << client_ip << "\n";
}

2. Résolution DNS pour obtenir le hostname

Une fois l'adresse IP obtenue, tu peux effectuer une résolution DNS inversée pour obtenir le nom d'hôte (<host>). Cela se fait avec la fonction getnameinfo().

Voici un exemple :

#include <sys/socket.h>
#include <netdb.h>
#include <iostream>

char host[NI_MAXHOST];
int res = getnameinfo((struct sockaddr*)&client_addr, client_len,
                      host, sizeof(host),
                      nullptr, 0, 0);

if (res == 0) {
    std::cout << "Nom d'hôte du client : " << host << "\n";
} else {
    std::cerr << "Impossible de résoudre le nom d'hôte : " << gai_strerror(res) << "\n";
}

3. Gérer les cas où le hostname n'est pas disponible

Il est possible que la résolution DNS échoue, par exemple si l'hôte n'a pas de nom enregistré. Dans ce cas, tu peux utiliser directement l'adresse IP comme host.
Code complet pour récupérer <host>

Voici un exemple complet :

#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <cstring>
#include <iostream>
#include <unistd.h>

int main() {
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        std::cerr << "Erreur lors de la création du socket\n";
        return 1;
    }

    struct sockaddr_in server_addr;
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(6667);  // Port IRC standard
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_socket, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        std::cerr << "Erreur lors du bind\n";
        return 1;
    }

    listen(server_socket, 5);
    std::cout << "En attente de connexions...\n";

    struct sockaddr_in client_addr;
    socklen_t client_len = sizeof(client_addr);
    int client_socket = accept(server_socket, (struct sockaddr*)&client_addr, &client_len);

    if (client_socket < 0) {
        std::cerr << "Erreur lors de l'acceptation de la connexion\n";
        return 1;
    }

    char client_ip[INET_ADDRSTRLEN];
    inet_ntop(AF_INET, &client_addr.sin_addr, client_ip, INET_ADDRSTRLEN);
    std::cout << "Client connecté avec l'adresse IP : " << client_ip << "\n";

    char host[NI_MAXHOST];
    int res = getnameinfo((struct sockaddr*)&client_addr, client_len,
                          host, sizeof(host),
                          nullptr, 0, 0);

    if (res == 0) {
        std::cout << "Nom d'hôte du client : " << host << "\n";
    } else {
        std::cout << "Nom d'hôte introuvable, utilisation de l'IP : " << client_ip << "\n";
    }

    close(client_socket);
    close(server_socket);
    return 0;
}

Points importants :

    Performances de la résolution DNS :
        Faire une résolution DNS peut ralentir ton serveur s'il doit gérer de nombreuses connexions simultanément. Si possible, effectue cette étape de manière asynchrone ou en différé.

    Dépendances réseau :
        Si le réseau du client ou ton serveur DNS est instable, la résolution DNS peut échouer ou être lente.

    Options de configuration IRC :
        Certains serveurs IRC permettent aux clients de spécifier eux-mêmes leur <host> via une commande USER, mais il est souvent préférable de valider cela avec la véritable adresse réseau.

En utilisant cette méthode, tu peux récupérer et envoyer un <host> précis pour tes messages IRC.
